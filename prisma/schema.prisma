generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_POSTGRES_URL_NON_POOLING")
}

model Event {
  id               String       @id @default(cuid())
  eventDescription String
  eventName        String
  organizer        String
  eventDateEnd     DateTime
  eventDateStart   DateTime
  bannerImage      String
  address          Address?
  tags             Tags[]
  tickets          Ticket[]
  orders           Order[]
  eventStatus      EVENT_STATUS @default(ACTIVE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  SEOMeta          SEOMeta?
  Analytics        Analytics?
}

model Address {
  id           String   @id @default(cuid())
  number       Int?
  neighborhood String
  city         String
  state        String
  localName    String?
  cep          String
  street       String
  Event        Event    @relation(fields: [eventId], references: [id])
  eventId      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Ticket {
  id                          String              @id @default(cuid())
  eventId                     String?
  endSellingAt                DateTime
  startSellingAt              DateTime
  ticketDescription           String
  ticketName                  String
  ticketPrice                 Decimal
  ticketSubTotalPrice         Decimal             @default(0)
  ticketDefaultAvailableStock Int
  reservedTickets             TicketReservation[]
  stripeID                    String
  Event                       Event?              @relation(fields: [eventId], references: [id])
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime            @updatedAt
  orderItem                   OrderItem[]
  form                        Form?
}

model TicketReservation {
  id         String             @id @default(cuid())
  ticket     Ticket             @relation(fields: [ticketId], references: [id])
  ticketId   String
  status     RESERVATION_STATUS
  expiresAt  DateTime
  customData Json? // Para armazenar dados personalizados do ticket
  version    Int                @default(0)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  Order      Order?             @relation(fields: [orderId], references: [id])
  orderId    String?
}

model SEOMeta {
  id                 String   @id @default(cuid())
  title              String?
  description        String?
  keywords           String[]
  ogTitle            String?
  ogDescription      String?
  ogUrl              String?
  ogImage            String?
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  Event              Event    @relation(fields: [eventId], references: [id])
  eventId            String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Tags {
  id    String  @id @default(cuid())
  tag   String
  Event Event[]
}

model Order {
  id              String              @id @default(cuid())
  userId          String?
  paymentId       String?             @unique
  total           Decimal
  subTotal        Decimal             @default(0)
  paymentStatus   String
  event           Event               @relation(fields: [eventId], references: [id])
  orderItems      OrderItem[]
  reservedTickets TicketReservation[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  eventId         String
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    String
  checkInDone Boolean? @default(false)
  qrCodeURL   String?
  userAnswers Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Analytics {
  id           String   @id @default(cuid())
  event        Event    @relation(fields: [eventId], references: [id])
  eventId      String   @unique
  pageViews    Int      @default(0)
  totalRevenue Float    @default(0.0)
  avgRevenue   Float    @default(0.0)
  soldTickets  Int      @default(0)
  sellQuantity Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("analytics")
}

model Form {
  id        String   @id @default(cuid())
  ticketId  String   @unique
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  fields    Json // Armazena a estrutura do formul√°rio em JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RESERVATION_STATUS {
  RESERVED
  SUCCESSFUL
  FAILED
}

enum EVENT_STATUS {
  ACTIVE
  ARCHIVED
  DISABLED
  CANCELED
  DRAFT
}
