generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Event {
  id               String   @id @default(cuid())
  addressId        String?
  eventDescription String
  eventName        String
  organizer        String
  sEOMetaId        String?
  eventDateEnd     DateTime
  eventDateStart   DateTime
  bannerImage      String
  address          Address?
  SEOMeta          SEOMeta?
  tags             Tags[]
  tickets          Ticket[]
  orders           Order[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Address {
  id           String   @id @default(cuid())
  number       Int?
  neighborhood String
  city         String
  state        String
  localName    String?
  cep          String
  street       String
  Event        Event    @relation(fields: [eventId], references: [id])
  eventId      String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Ticket {
  id                   String      @id @default(cuid())
  eventId              String?
  endSellingAt         DateTime
  startSellingAt       DateTime
  ticketDescription    String
  ticketName           String
  ticketPrice          Float
  ticketStockAvailable Int
  stripeID             String?
  Event                Event?      @relation(fields: [eventId], references: [id])
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderItem            OrderItem[]
}

model SEOMeta {
  id                 String   @id @default(cuid())
  title              String?
  description        String?
  keywords           String[]
  ogTitle            String?
  ogDescription      String?
  ogUrl              String?
  ogImage            String?
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  Event              Event    @relation(fields: [eventId], references: [id])
  eventId            String   @unique
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Tags {
  id    String  @id @default(cuid())
  tag   String
  Event Event[]
}

// model TagsOnEvents {
//   Event      Event    @relation(fields: [eventId], references: [id])
//   eventId    String
//   tag        Tags     @relation(fields: [tagId], references: [id])
//   tagId      String
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([eventId, tagId])
// }

model Order {
  id            String      @id @default(cuid())
  userId        String
  paymentId     String?     @unique
  total         Int
  paymentStatus String
  event         Event       @relation(fields: [eventId], references: [id])
  orderItems    OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  eventId       String      @default("cluxya4480000282dwasofhto")
}

model OrderItem {
  id          String   @id @default(cuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  ticket      Ticket   @relation(fields: [ticketId], references: [id])
  ticketId    String
  quantity    Int
  checkInDone Boolean? @default(false)
  qrCodeURL   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
